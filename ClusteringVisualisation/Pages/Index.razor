@page "/"
@using Clustering
@using System.Numerics

<div style="display: flex; flex-flow: column; height: 100%">
    <div>
        Hello, header
    </div>
    <div style="flex-grow: 1">
        <div style="display: flex; width: 100%; height: 100%">
            @if (this.methodIndex == 0)
            {
                <ClusteringChart @ref="this.clusteringMethod"></ClusteringChart>
            }
            else
            {
                <Dendrogram @ref="this.clusteringMethod"></Dendrogram>
            }
            <div style="background: gray">
                <div>
                    <label>Clustering method</label>
                    <select @bind="this.methodIndex">
                        <option value="0">K-means</option>
                        <option value="1">Single-linkage (dendrogram)</option>
                    </select>
                </div>
                <div>
                    <label>Points count: @this.pointsCount</label>
                    <input type="range" min="1" max="500" value="@pointsCount" @onchange="OnPointsCountChanged" />
                </div>
                <div>
                    <button @onclick="StartClustering">Cluster</button>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    private int pointsCount = 100;

    private int methodIndex = 0;

    private IClusteringMethod clusteringMethod;

    private void OnPointsCountChanged(ChangeEventArgs e)
    {
        this.pointsCount = int.Parse(e.Value?.ToString() ?? "0");
        StartClustering();
    }

    private void StartClustering()
    {
        var points = CreatePoints(this.pointsCount);
        clusteringMethod.StartClustering(points);
    }

    private static Point[] CreatePoints(int count)
    {
        return new GaussianPointsGenerator(
            rng: new Random(),
            stdev: 0.75,
            area: new System.Drawing.RectangleF(-5f, -5f, 10f, 10f),
            clustersCount: 4
        )
        .GeneratePoints(count)
        .Select(p => new Point
        {
            Coordinates = new Vector2(
                x: p.X.Map01(-5f, 5f),
                y: p.Y.Map01(-5f, 5f)
            )
        })
        .ToArray();
    }
}
